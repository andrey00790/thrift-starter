/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package example;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2018-11-6")
public class TUserException extends TException implements org.apache.thrift.TBase<TUserException, TUserException._Fields>, java.io.Serializable, Cloneable, Comparable<TUserException> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TUserException");

  private static final org.apache.thrift.protocol.TField REASON_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("reasonCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DETAIL_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("detailMessage", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TUserExceptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TUserExceptionTupleSchemeFactory());
  }

  private String reasonCode; // required
  private String detailMessage; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REASON_CODE((short)1, "reasonCode"),
    DETAIL_MESSAGE((short)2, "detailMessage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REASON_CODE
          return REASON_CODE;
        case 2: // DETAIL_MESSAGE
          return DETAIL_MESSAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REASON_CODE, new org.apache.thrift.meta_data.FieldMetaData("reasonCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAIL_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("detailMessage", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TUserException.class, metaDataMap);
  }

  public TUserException() {
  }

  public TUserException(
    String reasonCode,
    String detailMessage)
  {
    this();
    this.reasonCode = reasonCode;
    this.detailMessage = detailMessage;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TUserException(TUserException other) {
    if (other.isSetReasonCode()) {
      this.reasonCode = other.reasonCode;
    }
    if (other.isSetDetailMessage()) {
      this.detailMessage = other.detailMessage;
    }
  }

  public TUserException deepCopy() {
    return new TUserException(this);
  }

  @Override
  public void clear() {
    this.reasonCode = null;
    this.detailMessage = null;
  }

  public String getReasonCode() {
    return this.reasonCode;
  }

  public void setReasonCode(String reasonCode) {
    this.reasonCode = reasonCode;
  }

  public void unsetReasonCode() {
    this.reasonCode = null;
  }

  /** Returns true if field reasonCode is set (has been assigned a value) and false otherwise */
  public boolean isSetReasonCode() {
    return this.reasonCode != null;
  }

  public void setReasonCodeIsSet(boolean value) {
    if (!value) {
      this.reasonCode = null;
    }
  }

  public String getDetailMessage() {
    return this.detailMessage;
  }

  public void setDetailMessage(String detailMessage) {
    this.detailMessage = detailMessage;
  }

  public void unsetDetailMessage() {
    this.detailMessage = null;
  }

  /** Returns true if field detailMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailMessage() {
    return this.detailMessage != null;
  }

  public void setDetailMessageIsSet(boolean value) {
    if (!value) {
      this.detailMessage = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REASON_CODE:
      if (value == null) {
        unsetReasonCode();
      } else {
        setReasonCode((String)value);
      }
      break;

    case DETAIL_MESSAGE:
      if (value == null) {
        unsetDetailMessage();
      } else {
        setDetailMessage((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REASON_CODE:
      return getReasonCode();

    case DETAIL_MESSAGE:
      return getDetailMessage();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REASON_CODE:
      return isSetReasonCode();
    case DETAIL_MESSAGE:
      return isSetDetailMessage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TUserException)
      return this.equals((TUserException)that);
    return false;
  }

  public boolean equals(TUserException that) {
    if (that == null)
      return false;

    boolean this_present_reasonCode = true && this.isSetReasonCode();
    boolean that_present_reasonCode = true && that.isSetReasonCode();
    if (this_present_reasonCode || that_present_reasonCode) {
      if (!(this_present_reasonCode && that_present_reasonCode))
        return false;
      if (!this.reasonCode.equals(that.reasonCode))
        return false;
    }

    boolean this_present_detailMessage = true && this.isSetDetailMessage();
    boolean that_present_detailMessage = true && that.isSetDetailMessage();
    if (this_present_detailMessage || that_present_detailMessage) {
      if (!(this_present_detailMessage && that_present_detailMessage))
        return false;
      if (!this.detailMessage.equals(that.detailMessage))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_reasonCode = true && (isSetReasonCode());
    list.add(present_reasonCode);
    if (present_reasonCode)
      list.add(reasonCode);

    boolean present_detailMessage = true && (isSetDetailMessage());
    list.add(present_detailMessage);
    if (present_detailMessage)
      list.add(detailMessage);

    return list.hashCode();
  }

  @Override
  public int compareTo(TUserException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReasonCode()).compareTo(other.isSetReasonCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReasonCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reasonCode, other.reasonCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailMessage()).compareTo(other.isSetDetailMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailMessage, other.detailMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TUserException(");
    boolean first = true;

    sb.append("reasonCode:");
    if (this.reasonCode == null) {
      sb.append("null");
    } else {
      sb.append(this.reasonCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailMessage:");
    if (this.detailMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.detailMessage);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetReasonCode()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'reasonCode' is unset! Struct:" + toString());
    }

    if (!isSetDetailMessage()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'detailMessage' is unset! Struct:" + toString());
    }

    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TUserExceptionStandardSchemeFactory implements SchemeFactory {
    public TUserExceptionStandardScheme getScheme() {
      return new TUserExceptionStandardScheme();
    }
  }

  private static class TUserExceptionStandardScheme extends StandardScheme<TUserException> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TUserException struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REASON_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reasonCode = iprot.readString();
              struct.setReasonCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DETAIL_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detailMessage = iprot.readString();
              struct.setDetailMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TUserException struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.reasonCode != null) {
        oprot.writeFieldBegin(REASON_CODE_FIELD_DESC);
        oprot.writeString(struct.reasonCode);
        oprot.writeFieldEnd();
      }
      if (struct.detailMessage != null) {
        oprot.writeFieldBegin(DETAIL_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.detailMessage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TUserExceptionTupleSchemeFactory implements SchemeFactory {
    public TUserExceptionTupleScheme getScheme() {
      return new TUserExceptionTupleScheme();
    }
  }

  private static class TUserExceptionTupleScheme extends TupleScheme<TUserException> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TUserException struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.reasonCode);
      oprot.writeString(struct.detailMessage);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TUserException struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.reasonCode = iprot.readString();
      struct.setReasonCodeIsSet(true);
      struct.detailMessage = iprot.readString();
      struct.setDetailMessageIsSet(true);
    }
  }

}

